import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.LinkedList;
 
public class Main {
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		
		int T = Integer.parseInt(br.readLine());	// 테스트 케이스 
 
		while (T-- > 0) {
			
			StringTokenizer st = new StringTokenizer(br.readLine());
			
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			
			LinkedList<int[]> q = new LinkedList<>();	// Queue로 활용 할 연결리스트
			// N개 문서의 중요도 입력
			st = new StringTokenizer(br.readLine());
			// 문서 순서와 문서 중요도를 q에 저장
			for (int i = 0; i < N; i++) {
				// {초기 위치, 중요도}
				q.offer(new int[] { i, Integer.parseInt(st.nextToken()) });
			}
 
			int count = 0;	// 출력 횟수
			
			while (!q.isEmpty()) {	// 한 케이스에 대한 반복문
				int[] front = q.poll();	// 가장 첫 값
				boolean isMax = true;	// front 값이 가장 큰 값인지를 판단하는 변수
				
				// 큐에 남아있는 값들과 중요도를 비교 
				for(int i = 0; i < q.size(); i++) {
					
					// 처음 뽑은 값보다 큐에 있는 i번째 값이 중요도가 클 경우 
					if(front[1] < q.get(i)[1]) {
						
						// 뽑은 값 및 i 이전의 값들을 뒤로 보냄
						q.offer(front);
						for(int j = 0; j < i; j++) {
							q.offer(q.poll());
						}
						
						// front 값이 가장 큰 값이 아니였으므로 false를 하고 탐색을 마침
						isMax = false;
						break;
					}
				}
				
				// front 값이 가장 큰 값이 아니였으므로 다음 반복문으로 넘어감
				if(isMax == false) {
					continue;
				}
				
				// front 값 가장 큰 값이였으므로 해당 값은 출력해야하는 문서
				count++;
				if(front[0] == M) {	// 찾고자 하는 문서라면 해당 테스트케이스 종료
					break;
				}
 
			}
			// M번째 문서의 인쇄 차례 출력
			sb.append(count).append('\n');
 
		}
		System.out.println(sb);
	}
 
}
