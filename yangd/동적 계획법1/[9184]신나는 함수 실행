import java.util.Scanner;

public class Main{

//	동적계획법은 재귀함수를 매번 호출하지 않기 위해 배열을 이용하는 것이 핵심인가? 
//	배열에 이미 사용한 값을 저장해놓고 재귀함수를 또 호출할 필요가 없게 하려고 함.

	static int[][][] dp = new int[21][21][21];
// 각 배열의 크기가 21(0~20)을 넘기지 않는다.

	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		
		while(true) {
			
			int a = in.nextInt();
			int b = in.nextInt();
			int c = in.nextInt();
			
//			-1 -1 -1 이 나오면 종료
			if(a == -1 && b == -1 && c == -1) {
				break;
			}
			
			System.out.printf("w(%d, %d, %d) = %d\n", a, b, c, w(a, b, c));
		}
		
	}
	
	static int w(int a, int b, int c) {
//		이미 계산되어 있는 경우 해당 값을 바로 반환
		if(inRange(a,b,c)&&dp[a][b][c] != 0) {
			return dp[a][b][c];
		}
		if(a <= 0 || b <= 0 || c <= 0) {
			return 1;
		}
		
		if(a > 20 || b > 20 || c > 20) {
			return dp[20][20][20] = w(20,20,20);
		}
		if(a < b && b < c) {
			return dp[a][b][c] = w(a,b,c - 1) + w(a,b-1,c-1) -w(a,b-1,c);
		}
		return dp[a][b][c] = w(a-1,b,c) + w(a-1,b-1,c) +w(a-1,b,c-1)-w(a-1,b-1,c-1);
	}
	
	static boolean inRange(int a, int b, int c) {
		return 0 <= a && a <= 20 && 0 <= b && b <= 20 && 0 <= c && c <= 20;
	}
}
