import java.util.Scanner;

public class Main{
	
	static Integer[][] dp = new Integer[41][2];
	
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		dp[0][0] = 1;
		dp[0][1] = 0;
		dp[1][0] = 0;
		dp[1][1] = 1;
		
		int T = in.nextInt();
		
		StringBuilder sb = new StringBuilder();
		
		while(T-- > 0) {
			int N = in.nextInt();
			fibonacci(N);
			sb.append(dp[N][0]+" "+dp[N][1]).append('\n');
		}
		System.out.println(sb);
	}
	
	static Integer[] fibonacci(int N) {
		if(dp[N][0] == null || dp[N][1] == null) {
			dp[N][0] = fibonacci(N - 1)[0] + fibonacci(N - 2)[0];
			dp[N][1] = fibonacci(N - 1)[1] + fibonacci(N - 2)[1];
		}
		return dp[N];
	}
	
	
}

// 요약하면 N 전의 결과들을 배열에 저장해서 다시 불러오지 않게 하겠다는 풀이법이 동적계획법이라고 한다 (효율 고려) 
